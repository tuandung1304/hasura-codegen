schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  refresh the cache entry
  """
  refresh: Boolean! = false

  """
  measured in seconds
  """
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

"""
mutation root
"""
type mutation_root {
  """
  delete data from the table: "posts"
  """
  delete_posts(
    """
    filter the rows which have to be deleted
    """
    where: posts_bool_exp!
  ): posts_mutation_response

  """
  delete single row from the table: "posts"
  """
  delete_posts_by_pk(id: Int!): posts

  """
  delete data from the table: "users"
  """
  delete_users(
    """
    filter the rows which have to be deleted
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "posts"
  """
  insert_posts(
    """
    the rows to be inserted
    """
    objects: [posts_insert_input!]!

    """
    upsert condition
    """
    on_conflict: posts_on_conflict
  ): posts_mutation_response

  """
  insert a single row into the table: "posts"
  """
  insert_posts_one(
    """
    the row to be inserted
    """
    object: posts_insert_input!

    """
    upsert condition
    """
    on_conflict: posts_on_conflict
  ): posts

  """
  insert data into the table: "users"
  """
  insert_users(
    """
    the rows to be inserted
    """
    objects: [users_insert_input!]!

    """
    upsert condition
    """
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """
    the row to be inserted
    """
    object: users_insert_input!

    """
    upsert condition
    """
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "posts"
  """
  update_posts(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: posts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: posts_set_input

    """
    filter the rows which have to be updated
    """
    where: posts_bool_exp!
  ): posts_mutation_response

  """
  update single row of the table: "posts"
  """
  update_posts_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: posts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: posts_set_input
    pk_columns: posts_pk_columns_input!
  ): posts

  """
  update multiples rows of table: "posts"
  """
  update_posts_many(
    """
    updates to execute, in order
    """
    updates: [posts_updates!]!
  ): [posts_mutation_response]

  """
  update data of the table: "users"
  """
  update_users(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input

    """
    filter the rows which have to be updated
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """
    updates to execute, in order
    """
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

"""
columns and relationships of "posts"
"""
type posts {
  content: String!
  created_at: timestamptz!
  id: Int!
  title: String!
  updated_at: timestamptz!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
aggregated selection of "posts"
"""
type posts_aggregate {
  aggregate: posts_aggregate_fields
  nodes: [posts!]!
}

input posts_aggregate_bool_exp {
  count: posts_aggregate_bool_exp_count
}

input posts_aggregate_bool_exp_count {
  arguments: [posts_select_column!]
  distinct: Boolean
  filter: posts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "posts"
"""
type posts_aggregate_fields {
  avg: posts_avg_fields
  count(columns: [posts_select_column!], distinct: Boolean): Int!
  max: posts_max_fields
  min: posts_min_fields
  stddev: posts_stddev_fields
  stddev_pop: posts_stddev_pop_fields
  stddev_samp: posts_stddev_samp_fields
  sum: posts_sum_fields
  var_pop: posts_var_pop_fields
  var_samp: posts_var_samp_fields
  variance: posts_variance_fields
}

"""
order by aggregate values of table "posts"
"""
input posts_aggregate_order_by {
  avg: posts_avg_order_by
  count: order_by
  max: posts_max_order_by
  min: posts_min_order_by
  stddev: posts_stddev_order_by
  stddev_pop: posts_stddev_pop_order_by
  stddev_samp: posts_stddev_samp_order_by
  sum: posts_sum_order_by
  var_pop: posts_var_pop_order_by
  var_samp: posts_var_samp_order_by
  variance: posts_variance_order_by
}

"""
input type for inserting array relation for remote table "posts"
"""
input posts_arr_rel_insert_input {
  data: [posts_insert_input!]!

  """
  upsert condition
  """
  on_conflict: posts_on_conflict
}

"""
aggregate avg on columns
"""
type posts_avg_fields {
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "posts"
"""
input posts_avg_order_by {
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "posts". All fields are combined with a logical 'AND'.
"""
input posts_bool_exp {
  _and: [posts_bool_exp!]
  _not: posts_bool_exp
  _or: [posts_bool_exp!]
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "posts"
"""
enum posts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  posts_pkey
}

"""
input type for incrementing numeric columns in table "posts"
"""
input posts_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "posts"
"""
input posts_insert_input {
  content: String
  created_at: timestamptz
  id: Int
  title: String
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: Int
}

"""
aggregate max on columns
"""
type posts_max_fields {
  content: String
  created_at: timestamptz
  id: Int
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""
order by max() on columns of table "posts"
"""
input posts_max_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type posts_min_fields {
  content: String
  created_at: timestamptz
  id: Int
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""
order by min() on columns of table "posts"
"""
input posts_min_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "posts"
"""
type posts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [posts!]!
}

"""
on_conflict condition type for table "posts"
"""
input posts_on_conflict {
  constraint: posts_constraint!
  update_columns: [posts_update_column!]! = []
  where: posts_bool_exp
}

"""
Ordering options when selecting data from "posts".
"""
input posts_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: posts
"""
input posts_pk_columns_input {
  id: Int!
}

"""
select columns of table "posts"
"""
enum posts_select_column {
  """
  column name
  """
  content

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  title

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "posts"
"""
input posts_set_input {
  content: String
  created_at: timestamptz
  id: Int
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""
aggregate stddev on columns
"""
type posts_stddev_fields {
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "posts"
"""
input posts_stddev_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type posts_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "posts"
"""
input posts_stddev_pop_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type posts_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "posts"
"""
input posts_stddev_samp_order_by {
  id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "posts"
"""
input posts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: posts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input posts_stream_cursor_value_input {
  content: String
  created_at: timestamptz
  id: Int
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""
aggregate sum on columns
"""
type posts_sum_fields {
  id: Int
  user_id: Int
}

"""
order by sum() on columns of table "posts"
"""
input posts_sum_order_by {
  id: order_by
  user_id: order_by
}

"""
update columns of table "posts"
"""
enum posts_update_column {
  """
  column name
  """
  content

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  title

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

input posts_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: posts_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: posts_set_input

  """
  filter the rows which have to be updated
  """
  where: posts_bool_exp!
}

"""
aggregate var_pop on columns
"""
type posts_var_pop_fields {
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "posts"
"""
input posts_var_pop_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type posts_var_samp_fields {
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "posts"
"""
input posts_var_samp_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type posts_variance_fields {
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "posts"
"""
input posts_variance_order_by {
  id: order_by
  user_id: order_by
}

type query_root {
  """
  An array relationship
  """
  posts(
    """
    distinct select on columns
    """
    distinct_on: [posts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [posts_order_by!]

    """
    filter the rows returned
    """
    where: posts_bool_exp
  ): [posts!]!

  """
  An aggregate relationship
  """
  posts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [posts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [posts_order_by!]

    """
    filter the rows returned
    """
    where: posts_bool_exp
  ): posts_aggregate!

  """
  fetch data from the table: "posts" using primary key columns
  """
  posts_by_pk(id: Int!): posts

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: Int!): users
}

type subscription_root {
  """
  An array relationship
  """
  posts(
    """
    distinct select on columns
    """
    distinct_on: [posts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [posts_order_by!]

    """
    filter the rows returned
    """
    where: posts_bool_exp
  ): [posts!]!

  """
  An aggregate relationship
  """
  posts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [posts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [posts_order_by!]

    """
    filter the rows returned
    """
    where: posts_bool_exp
  ): posts_aggregate!

  """
  fetch data from the table: "posts" using primary key columns
  """
  posts_by_pk(id: Int!): posts

  """
  fetch data from the table in a streaming manner: "posts"
  """
  posts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [posts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: posts_bool_exp
  ): [posts!]!

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: Int!): users

  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [users_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  address: String
  age: Int
  created_at: timestamptz!
  email: String!
  id: Int!
  name: String!
  phone: String

  """
  An array relationship
  """
  posts(
    """
    distinct select on columns
    """
    distinct_on: [posts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [posts_order_by!]

    """
    filter the rows returned
    """
    where: posts_bool_exp
  ): [posts!]!

  """
  An aggregate relationship
  """
  posts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [posts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [posts_order_by!]

    """
    filter the rows returned
    """
    where: posts_bool_exp
  ): posts_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""
aggregate avg on columns
"""
type users_avg_fields {
  age: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  address: String_comparison_exp
  age: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  phone: String_comparison_exp
  posts: posts_bool_exp
  posts_aggregate: posts_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  users_email_key

  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  age: Int
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  address: String
  age: Int
  created_at: timestamptz
  email: String
  id: Int
  name: String
  phone: String
  posts: posts_arr_rel_insert_input
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type users_max_fields {
  address: String
  age: Int
  created_at: timestamptz
  email: String
  id: Int
  name: String
  phone: String
  updated_at: timestamptz
}

"""
aggregate min on columns
"""
type users_min_fields {
  address: String
  age: Int
  created_at: timestamptz
  email: String
  id: Int
  name: String
  phone: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """
  upsert condition
  """
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""
Ordering options when selecting data from "users".
"""
input users_order_by {
  address: order_by
  age: order_by
  created_at: order_by
  email: order_by
  id: order_by
  name: order_by
  phone: order_by
  posts_aggregate: posts_aggregate_order_by
  updated_at: order_by
}

"""
primary key columns input for table: users
"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  age

  """
  column name
  """
  created_at

  """
  column name
  """
  email

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  phone

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  address: String
  age: Int
  created_at: timestamptz
  email: String
  id: Int
  name: String
  phone: String
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type users_stddev_fields {
  age: Float
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type users_stddev_pop_fields {
  age: Float
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type users_stddev_samp_fields {
  age: Float
  id: Float
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: users_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input users_stream_cursor_value_input {
  address: String
  age: Int
  created_at: timestamptz
  email: String
  id: Int
  name: String
  phone: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type users_sum_fields {
  age: Int
  id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """
  column name
  """
  address

  """
  column name
  """
  age

  """
  column name
  """
  created_at

  """
  column name
  """
  email

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  phone

  """
  column name
  """
  updated_at
}

input users_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: users_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: users_set_input

  """
  filter the rows which have to be updated
  """
  where: users_bool_exp!
}

"""
aggregate var_pop on columns
"""
type users_var_pop_fields {
  age: Float
  id: Float
}

"""
aggregate var_samp on columns
"""
type users_var_samp_fields {
  age: Float
  id: Float
}

"""
aggregate variance on columns
"""
type users_variance_fields {
  age: Float
  id: Float
}
